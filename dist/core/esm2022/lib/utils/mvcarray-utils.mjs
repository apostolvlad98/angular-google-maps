import { fromEventPattern } from 'rxjs';
export function createMVCEventObservable(array) {
    const eventNames = ['insert_at', 'remove_at', 'set_at'];
    return fromEventPattern((handler) => eventNames.map(evName => array.addListener(evName, (index, previous) => handler.apply(array, [{ 'newArr': array.getArray(), evName, index, previous }]))), (_handler, evListeners) => evListeners.forEach(evListener => evListener.remove()));
}
export class MvcArrayMock {
    constructor() {
        this.vals = [];
        this.listeners = {
            'remove_at': [],
            'insert_at': [],
            'set_at': [],
        };
    }
    clear() {
        for (let i = this.vals.length - 1; i >= 0; i--) {
            this.removeAt(i);
        }
    }
    getArray() {
        return [...this.vals];
    }
    getAt(i) {
        return this.vals[i];
    }
    getLength() {
        return this.vals.length;
    }
    insertAt(i, elem) {
        this.vals.splice(i, 0, elem);
        this.listeners.insert_at.map(listener => listener(i));
    }
    pop() {
        const deleted = this.vals.pop();
        this.listeners.remove_at.map(listener => listener(this.vals.length, deleted));
        return deleted;
    }
    push(elem) {
        this.vals.push(elem);
        this.listeners.insert_at.map(listener => listener(this.vals.length - 1));
        return this.vals.length;
    }
    removeAt(i) {
        const deleted = this.vals.splice(i, 1)[0];
        this.listeners.remove_at.map(listener => listener(i, deleted));
        return deleted;
    }
    setAt(i, elem) {
        const deleted = this.vals[i];
        this.vals[i] = elem;
        this.listeners.set_at.map(listener => listener(i, deleted));
    }
    forEach(callback) {
        this.vals.forEach(callback);
    }
    addListener(eventName, handler) {
        const listenerArr = this.listeners[eventName];
        listenerArr.push(handler);
        return {
            remove: () => {
                listenerArr.splice(listenerArr.indexOf(handler), 1);
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXZjYXJyYXktdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvdXRpbHMvbXZjYXJyYXktdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFjLE1BQU0sTUFBTSxDQUFDO0FBR3BELE1BQU0sVUFBVSx3QkFBd0IsQ0FBSSxLQUFrQjtJQUM1RCxNQUFNLFVBQVUsR0FBRyxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDeEQsT0FBTyxnQkFBZ0IsQ0FDckIsQ0FBQyxPQUFpQixFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQ3RFLENBQUMsS0FBYSxFQUFFLFFBQVksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBRSxFQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDbEksQ0FBQyxRQUFrQixFQUFFLFdBQWdDLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3RILENBQUM7QUFXRCxNQUFNLE9BQU8sWUFBWTtJQUF6QjtRQUNVLFNBQUksR0FBUSxFQUFFLENBQUM7UUFDZixjQUFTLEdBS2I7WUFDRixXQUFXLEVBQUUsRUFBZ0I7WUFDN0IsV0FBVyxFQUFFLEVBQWdCO1lBQzdCLFFBQVEsRUFBRSxFQUFnQjtTQUMzQixDQUFDO0lBbURKLENBQUM7SUFsREMsS0FBSztRQUNILEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUM3QyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLENBQUM7SUFDSCxDQUFDO0lBQ0QsUUFBUTtRQUNOLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBQ0QsS0FBSyxDQUFDLENBQVM7UUFDYixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUNELFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzFCLENBQUM7SUFDRCxRQUFRLENBQUMsQ0FBUyxFQUFFLElBQU87UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBQ0QsR0FBRztRQUNELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDOUUsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUNELElBQUksQ0FBQyxJQUFPO1FBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMxQixDQUFDO0lBQ0QsUUFBUSxDQUFDLENBQVM7UUFDaEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMvRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBQ0QsS0FBSyxDQUFDLENBQVMsRUFBRSxJQUFPO1FBQ3RCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFDRCxPQUFPLENBQUMsUUFBc0M7UUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUNELFdBQVcsQ0FBQyxTQUFpQixFQUFFLE9BQWlCO1FBQzlDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQixPQUFPO1lBQ0gsTUFBTSxFQUFFLEdBQUcsRUFBRTtnQkFDVCxXQUFXLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDeEQsQ0FBQztTQUNKLENBQUM7SUFDSixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcm9tRXZlbnRQYXR0ZXJuLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBNYXBzRXZlbnRMaXN0ZW5lciwgTVZDQXJyYXkgfSBmcm9tICcuLi9zZXJ2aWNlcy9nb29nbGUtbWFwcy10eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNVkNFdmVudE9ic2VydmFibGU8VD4oYXJyYXk6IE1WQ0FycmF5PFQ+KTogT2JzZXJ2YWJsZTxNVkNFdmVudDxUPj57XG4gIGNvbnN0IGV2ZW50TmFtZXMgPSBbJ2luc2VydF9hdCcsICdyZW1vdmVfYXQnLCAnc2V0X2F0J107XG4gIHJldHVybiBmcm9tRXZlbnRQYXR0ZXJuKFxuICAgIChoYW5kbGVyOiBGdW5jdGlvbikgPT4gZXZlbnROYW1lcy5tYXAoZXZOYW1lID0+IGFycmF5LmFkZExpc3RlbmVyKGV2TmFtZSxcbiAgICAgIChpbmRleDogbnVtYmVyLCBwcmV2aW91cz86IFQpID0+IGhhbmRsZXIuYXBwbHkoYXJyYXksIFsgeyduZXdBcnInOiBhcnJheS5nZXRBcnJheSgpLCBldk5hbWUsIGluZGV4LCBwcmV2aW91c30gYXMgTVZDRXZlbnQ8VD5dKSkpLFxuICAgIChfaGFuZGxlcjogRnVuY3Rpb24sIGV2TGlzdGVuZXJzOiBNYXBzRXZlbnRMaXN0ZW5lcltdKSA9PiBldkxpc3RlbmVycy5mb3JFYWNoKGV2TGlzdGVuZXIgPT4gZXZMaXN0ZW5lci5yZW1vdmUoKSkpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1WQ0V2ZW50PFQ+IHtcbiAgbmV3QXJyOiBUW107XG4gIGV2TmFtZTogTXZjRXZlbnRUeXBlO1xuICBpbmRleDogbnVtYmVyO1xuICBwcmV2aW91cz86IFQ7XG59XG5cbmV4cG9ydCB0eXBlIE12Y0V2ZW50VHlwZSA9ICdpbnNlcnRfYXQnIHwgJ3JlbW92ZV9hdCcgfCAnc2V0X2F0JztcblxuZXhwb3J0IGNsYXNzIE12Y0FycmF5TW9jazxUPiBpbXBsZW1lbnRzIE1WQ0FycmF5PFQ+IHtcbiAgcHJpdmF0ZSB2YWxzOiBUW10gPSBbXTtcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IHtcbiAgICAncmVtb3ZlX2F0JzogRnVuY3Rpb25bXTtcbiAgICAnaW5zZXJ0X2F0JzogRnVuY3Rpb25bXTtcbiAgICAnc2V0X2F0JzogRnVuY3Rpb25bXTtcbiAgICBba2V5OiBzdHJpbmddOiBGdW5jdGlvbltdO1xuICB9ID0ge1xuICAgICdyZW1vdmVfYXQnOiBbXSBhcyBGdW5jdGlvbltdLFxuICAgICdpbnNlcnRfYXQnOiBbXSBhcyBGdW5jdGlvbltdLFxuICAgICdzZXRfYXQnOiBbXSBhcyBGdW5jdGlvbltdLFxuICB9O1xuICBjbGVhcigpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gdGhpcy52YWxzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlQXQoaSk7XG4gICAgfVxuICB9XG4gIGdldEFycmF5KCk6IFRbXSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLnZhbHNdO1xuICB9XG4gIGdldEF0KGk6IG51bWJlcik6IFQge1xuICAgIHJldHVybiB0aGlzLnZhbHNbaV07XG4gIH1cbiAgZ2V0TGVuZ3RoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudmFscy5sZW5ndGg7XG4gIH1cbiAgaW5zZXJ0QXQoaTogbnVtYmVyLCBlbGVtOiBUKTogdm9pZCB7XG4gICAgdGhpcy52YWxzLnNwbGljZShpLCAwLCBlbGVtKTtcbiAgICB0aGlzLmxpc3RlbmVycy5pbnNlcnRfYXQubWFwKGxpc3RlbmVyID0+IGxpc3RlbmVyKGkpKTtcbiAgfVxuICBwb3AoKTogVCB7XG4gICAgY29uc3QgZGVsZXRlZCA9IHRoaXMudmFscy5wb3AoKTtcbiAgICB0aGlzLmxpc3RlbmVycy5yZW1vdmVfYXQubWFwKGxpc3RlbmVyID0+IGxpc3RlbmVyKHRoaXMudmFscy5sZW5ndGgsIGRlbGV0ZWQpKTtcbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuICBwdXNoKGVsZW06IFQpOiBudW1iZXIge1xuICAgIHRoaXMudmFscy5wdXNoKGVsZW0pO1xuICAgIHRoaXMubGlzdGVuZXJzLmluc2VydF9hdC5tYXAobGlzdGVuZXIgPT4gbGlzdGVuZXIodGhpcy52YWxzLmxlbmd0aCAtIDEpKTtcbiAgICByZXR1cm4gdGhpcy52YWxzLmxlbmd0aDtcbiAgfVxuICByZW1vdmVBdChpOiBudW1iZXIpOiBUIHtcbiAgICBjb25zdCBkZWxldGVkID0gdGhpcy52YWxzLnNwbGljZShpLCAxKVswXTtcbiAgICB0aGlzLmxpc3RlbmVycy5yZW1vdmVfYXQubWFwKGxpc3RlbmVyID0+IGxpc3RlbmVyKGksIGRlbGV0ZWQpKTtcbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuICBzZXRBdChpOiBudW1iZXIsIGVsZW06IFQpOiB2b2lkIHtcbiAgICBjb25zdCBkZWxldGVkID0gdGhpcy52YWxzW2ldO1xuICAgIHRoaXMudmFsc1tpXSA9IGVsZW07XG4gICAgdGhpcy5saXN0ZW5lcnMuc2V0X2F0Lm1hcChsaXN0ZW5lciA9PiBsaXN0ZW5lcihpLCBkZWxldGVkKSk7XG4gIH1cbiAgZm9yRWFjaChjYWxsYmFjazogKGVsZW06IFQsIGk6IG51bWJlcikgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMudmFscy5mb3JFYWNoKGNhbGxiYWNrKTtcbiAgfVxuICBhZGRMaXN0ZW5lcihldmVudE5hbWU6IHN0cmluZywgaGFuZGxlcjogRnVuY3Rpb24pOiBNYXBzRXZlbnRMaXN0ZW5lciB7XG4gICAgY29uc3QgbGlzdGVuZXJBcnIgPSB0aGlzLmxpc3RlbmVyc1tldmVudE5hbWVdO1xuICAgIGxpc3RlbmVyQXJyLnB1c2goaGFuZGxlcik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZlOiAoKSA9PiB7XG4gICAgICAgICAgICBsaXN0ZW5lckFyci5zcGxpY2UobGlzdGVuZXJBcnIuaW5kZXhPZihoYW5kbGVyKSwgMSk7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgfVxufVxuIl19